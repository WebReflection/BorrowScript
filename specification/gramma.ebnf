program := whitespace? {import whitespace} {globalVariableInitialiser whitespace } {funcDeclaration whitespace} funcDeclaration whitespace?
import := "import" whitespace ("*" whitespace "as" whitespace identifier | "{" whitespace {identifier whitespace "," whitespace } identifier whitespace "}" ) whitespace from whitespace STRING whitespace? end;
variableAssignment := identifier "=" expression whitespace? end;
globalVariableInitialiser := mutibilityModifier whitespace identifier whitespace? (":" whitespace? identifier )? "=" simpleExpression whitespace? end;
variableInitialiser := mutibilityModifier whitespace identifier whitespace? (":" whitespace? identifier )? "=" expression whitespace? end;
expression := symbol | prefixOperator expression | "(" expression")" | expression binaryOperator expression | funcCall | funcDeclaration | "await" expression | whitespace? expression whitespace?;
simpleExpression := symbol | prefixOperator expression | "(" expression")" | expression binaryOperator expression | funcDeclaration | whitespace? expression whitespace?;
funcDeclaration := ("async" whitespace? )? "(" whitespace? ({variableInitialiser whitespace? "," whitespace? } variableInitialiser whitespace? )?  ")" whitespace? "=>" whitespace? (expression | expressionBlock );
expressionBlock := "{"whitespace? {expression whitespace}expression whitespace? "}"
funcCall := expression "(" whitespace? ({ whitespace? expression whitespace? "," } whitespace? expression whitespace?)? ")"
mutibilityModifier := "let" | "const";
symbol := STRING | integer | decimal | identifier | boolean;
decimal := integer "." digit {digit}
integer := digit {digit};
identifier :=( lowercaseLetter | uppercaseLetter) {alphanumeric};
boolean := "true" | "false"
binaryOperator = "+" | "-" | "*" | "/";
prefixOperator := "!" | "-";
alphanumeric := digit|lowercaseLetter|uppercaseLetter;
lowercaseLetter := [a-z];
uppercaseLetter := [A-Z]
digit:=[0-9]
whitespace := " " | {whitespace } " " | COMMENTSTRING | "\n"
end := ";"
